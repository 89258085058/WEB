{"name": "Позитивные сценарии: Проверка ввода значений в поле 'Поиск'", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка! Нет возможности кликнуть по локатору: '('xpath', '//*[@id=\"app\"]/main//div[@class=\"reset-icon\"]')'", "trace": "self = <fixture.method.MethodsHelper object at 0x00000191AB50B610>, value = 0, locator = '//*[@id=\"app\"]/main//div/input'\n\n    def inputValues(self, value, locator):\n        try:\n            wd = self.app.wd\n            element = WebDriverWait(wd, 10).until(\n                EC.element_to_be_clickable((By.XPATH, ('%s' % locator))))\n>           element.clear()\n\nfixture\\method.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"68183e9312cc403c0bd82a6561a8a42c\", element=\"5fe0a3b5-486a-4d81-9a0a-3d26bb77c8d7\")>\n\n    def clear(self) -> None:\n        \"\"\"Clears the text if it's a text entry element.\"\"\"\n>       self._execute(Command.CLEAR_ELEMENT)\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"68183e9312cc403c0bd82a6561a8a42c\", element=\"5fe0a3b5-486a-4d81-9a0a-3d26bb77c8d7\")>, command = 'clearElement'\nparams = {'id': '5fe0a3b5-486a-4d81-9a0a-3d26bb77c8d7', 'sessionId': '68183e9312cc403c0bd82a6561a8a42c'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68183e9312cc403c0bd82a6561a8a42c\")>, driver_command = 'clearElement', params = {'id': '5fe0a3b5-486a-4d81-9a0a-3d26bb77c8d7'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000191AC932F50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77317A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77317A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x004AF243]\nE       \t(No symbol) [0x00437FD1]\nE       \t(No symbol) [0x0032D04D]\nE       \t(No symbol) [0x0032FD34]\nE       \t(No symbol) [0x0032FBE5]\nE       \t(No symbol) [0x0032FE80]\nE       \t(No symbol) [0x0035CA83]\nE       \t(No symbol) [0x00354E5C]\nE       \t(No symbol) [0x0037858C]\nE       \t(No symbol) [0x00352BFF]\nE       \t(No symbol) [0x00378804]\nE       \t(No symbol) [0x0038C9EB]\nE       \t(No symbol) [0x00378386]\nE       \t(No symbol) [0x0035163C]\nE       \t(No symbol) [0x0035269D]\nE       \tGetHandleVerifier [0x00749A22+2655074]\nE       \tGetHandleVerifier [0x0073CA24+2601828]\nE       \tGetHandleVerifier [0x00558C0A+619850]\nE       \tGetHandleVerifier [0x00557830+614768]\nE       \t(No symbol) [0x004405FC]\nE       \t(No symbol) [0x00445968]\nE       \t(No symbol) [0x00445A55]\nE       \t(No symbol) [0x0045051B]\nE       \tBaseThreadInitThunk [0x7648FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77317A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77317A4E+238]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.PO_Zone_Path.ZonePathHelper object at 0x00000191AC9B18D0>, locator = '//*[@id=\"app\"]/main//div/input'\n\n    def input_seach(self, locator=Search):\n        try:\n>           self.input_all(locator)\n\npages\\PO_Zone_Path.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.PO_Zone_Path.ZonePathHelper object at 0x00000191AC9B18D0>, locator = '//*[@id=\"app\"]/main//div/input'\n\n    def input_all(self, locator):\n        with allure.step(\"Проверка ввода цифр\"):\n            for i in range(10):\n>               self.app.method.assertEqual(i, i, locator)\n\npages\\PO_Zone_Path.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <fixture.method.MethodsHelper object at 0x00000191AB50B610>, input = 0, expected = 0, locator = '//*[@id=\"app\"]/main//div/input'\n\n    def assertEqual(self, input, expected, locator):\n>       self.inputValues(input, locator)\n\nfixture\\method.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <fixture.method.MethodsHelper object at 0x00000191AB50B610>, value = 0, locator = '//*[@id=\"app\"]/main//div/input'\n\n    def inputValues(self, value, locator):\n        try:\n            wd = self.app.wd\n            element = WebDriverWait(wd, 10).until(\n                EC.element_to_be_clickable((By.XPATH, ('%s' % locator))))\n            element.clear()\n            element.send_keys(value)\n            # element.click()\n        except Exception as e:\n>           assert e == TimeoutException, f\"Ошибка локатор поля ввода '{locator}' - не найден\"\nE           AssertionError: Ошибка локатор поля ввода '//*[@id=\"app\"]/main//div/input' - не найден\n\nfixture\\method.py:42: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <fixture.method.MethodsHelper object at 0x00000191AB50B610>, locator = ('xpath', '//*[@id=\"app\"]/main//div[@class=\"reset-icon\"]')\n\n    def click(self, locator):\n        try:\n            wd = self.app.wd\n>           element = WebDriverWait(wd, 10).until(\n                EC.element_to_be_clickable((locator)))\n\nfixture\\method.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"68183e9312cc403c0bd82a6561a8a42c\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000191ACD69120>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:87: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <WEB.tests.VALIDATION.testZonePathValidation.TestZonePathValidationPath object at 0x00000191AC9977D0>, app = <fixture.application.Application object at 0x00000191AC9AFFD0>\n\n    @allure.story(\"РАЗДЕЛЫ\")\n    @allure.title(\"Позитивные сценарии: Проверка ввода значений в поле 'Поиск'\")\n    def test_path_input_search(self, app):\n        with allure.step(\"Переход на страницу Зоны Разделы\"):\n            app.PO_Navigations.goToZonePathPage()\n        with allure.step(\"Переход на вкладку 'Разделы'\"):\n            app.PO_Navigations.goToPathPage()\n        with allure.step(\"Проверка валидации поля\"):\n>           app.PO_Zone_Path.input_seach()\n\ntests\\VALIDATION\\testZonePathValidation.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\PO_Zone_Path.py:62: in input_seach\n    self.app.method.click((By.XPATH, cross_close_button))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <fixture.method.MethodsHelper object at 0x00000191AB50B610>, locator = ('xpath', '//*[@id=\"app\"]/main//div[@class=\"reset-icon\"]')\n\n    def click(self, locator):\n        try:\n            wd = self.app.wd\n            element = WebDriverWait(wd, 10).until(\n                EC.element_to_be_clickable((locator)))\n            element.click()\n        except Exception as e:\n>           assert e == TimeoutException, f\"Ошибка! Нет возможности кликнуть по локатору: '{locator}'\"\nE           AssertionError: Ошибка! Нет возможности кликнуть по локатору: '('xpath', '//*[@id=\"app\"]/main//div[@class=\"reset-icon\"]')'\n\nfixture\\method.py:116: AssertionError"}, "steps": [{"name": "Переход на страницу Зоны Разделы", "status": "passed", "start": 1671538379756, "stop": 1671538380362}, {"name": "Переход на вкладку 'Разделы'", "status": "passed", "start": 1671538380362, "stop": 1671538380366}, {"name": "Проверка валидации поля", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка! Нет возможности кликнуть по локатору: '('xpath', '//*[@id=\"app\"]/main//div[@class=\"reset-icon\"]')'\n", "trace": "  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\tests\\VALIDATION\\testZonePathValidation.py\", line 62, in test_path_input_search\n    app.PO_Zone_Path.input_seach()\n  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\pages\\PO_Zone_Path.py\", line 62, in input_seach\n    self.app.method.click((By.XPATH, cross_close_button))\n  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\fixture\\method.py\", line 116, in click\n    assert e == TimeoutException, f\"Ошибка! Нет возможности кликнуть по локатору: '{locator}'\"\n           ^^^^^^^^^^^^^^^^^^^^^\n"}, "steps": [{"name": "Проверка ввода цифр", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка локатор поля ввода '//*[@id=\"app\"]/main//div/input' - не найден\n", "trace": "  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\pages\\PO_Zone_Path.py\", line 25, in input_all\n    self.app.method.assertEqual(i, i, locator)\n  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\fixture\\method.py\", line 29, in assertEqual\n    self.inputValues(input, locator)\n  File \"C:\\Users\\gorelov\\git)hub\\web\\WEB\\fixture\\method.py\", line 42, in inputValues\n    assert e == TimeoutException, f\"Ошибка локатор поля ввода '{locator}' - не найден\"\n           ^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1671538380366, "stop": 1671538380413}], "start": 1671538380366, "stop": 1671538390807}], "attachments": [{"name": "↓ СКРИНШОТ ↓", "source": "21ba0acc-31fe-4e65-884b-757c31c86231-attachment.png", "type": "image/png"}], "start": 1671538379756, "stop": 1671538390809, "uuid": "461c41cc-f7a0-4a1f-bd1f-831734262b9a", "historyId": "74525732400cc433ef5d94174c6b6b81", "testCaseId": "75cf11c8eb06a8031aecf35eff71e05c", "fullName": "tests.VALIDATION.testZonePathValidation.TestZonePathValidationPath#test_path_input_search", "labels": [{"name": "feature", "value": "Валидация полей ввода"}, {"name": "epic", "value": "Тесты ЗОНЫ/РАЗДЕЛЫ"}, {"name": "owner", "value": "Александр Горелов"}, {"name": "story", "value": "РАЗДЕЛЫ"}, {"name": "tag", "value": "flaky(reruns=1)"}, {"name": "parentSuite", "value": "tests.VALIDATION"}, {"name": "suite", "value": "testZonePathValidation"}, {"name": "subSuite", "value": "TestZonePathValidationPath"}, {"name": "host", "value": "zelenograd-5"}, {"name": "thread", "value": "11512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.VALIDATION.testZonePathValidation"}]}